# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
DURATION=''
REST=''
parse() {
	OPTIND=$(($#+1))
	while OPTARG= && [ $# -gt 0 ]; do
		case $1 in
			--?*=*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
				;;
			--no-*|--without-*) unset OPTARG ;;
			-[h]?*) OPTARG=$1; shift
				eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
				OPTARG= ;;
		esac
		case $1 in
			'--for')
				[ $# -le 1 ] && set "required" "$1" && break
				OPTARG=$2
				DURATION="$OPTARG"
				shift ;;
			'-h'|'--help')
				usage
				exit 0 ;;
			--)
				shift
				while [ $# -gt 0 ]; do
					REST="${REST} \"\${$(($OPTIND-$#))}\""
					shift
				done
				break ;;
			[-]?*) set "unknown" "$1"; break ;;
			*)
				REST="${REST} \"\${$(($OPTIND-$#))}\""
		esac
		shift
	done
	[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
	case $1 in
		unknown) set "Unrecognized option: $2" "$@" ;;
		noarg) set "Does not allow an argument: $2" "$@" ;;
		required) set "Requires an argument: $2" "$@" ;;
		pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
		notcmd) set "Not a command: $2" "$@" ;;
		*) set "Validation error ($1): $2" "$@"
	esac
	echo "$1" >&2
	exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: metronome [options]... [arguments]...

Options:
      --for DURATION          Returns to the current type after the specified number of minutes
  -h, --help                  Print help message and exit
GETOPTIONSHERE
}
# Generated by getoptions (END)
